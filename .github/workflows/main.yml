name: req actions

on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  REPOSITORY_FRONTEND: e-requestcontrol-frontend
  REPOSITORY_BACKEND: e-requestcontrol-backend
  REPOSITORY_DB: e-requestcontrol-db
  EKS_CLUSTER: e-requestcontrol-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      # Установка Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with: 
          go-version: '1.22' # или твоя нужная версия

      # Установка Node.js (для Vue.js)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # или твоя нужная версия

      - name: Install Node dependencies
        working-directory: request-manager-ui
        run: npm install
# Setup java 11 to be default (sonar-scanner requirement as of 5.x)
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' # See 'Supported distributions' for available options
         java-version: '11'

      # Установка sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: Debug Sonar variables
        run: |
          echo "SONAR_ORGANIZATION:${{ secrets.SONAR_ORGANIZATION }}"
          echo "SONAR_PROJECT_KEY:${{ secrets.SONAR_PROJECT_KEY }}"
          echo "SONAR_URL:${{ secrets.SONAR_URL }}"

      # Запуск анализа
      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=request-manager-api,request-manager-ui \
            -Dsonar.language=go \
            -Dsonar.inclusions=**/*.go,**/*.js,**/*.vue \
            -Dsonar.exclusions=**/node_modules/**,**/vendor/**

  BUILD_AND_PUBLISH:   
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Push Frontend
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.REPOSITORY_FRONTEND }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          dockerfile: request-manager-ui/dockerfile
          context: ./request-manager-ui

      - name: Push Backend
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.REPOSITORY_BACKEND }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          dockerfile: request-manager-api/dockerfile
          context: ./request-manager-api

      - name: Push DB
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.REPOSITORY_DB }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          dockerfile: request-manager-database/dockerfile
          context: ./request-manager-database

      - name: delete old ecr
        run: |
                REPO_NAMES=("${{ env.REPOSITORY_FRONTEND }}" "${{ env.REPOSITORY_BACKEND }}" "${{ env.REPOSITORY_DB }}")
                for repo in "${REPO_NAMES[@]}"; do
                  echo "Cleaning up $repo"
                  tags=$(aws ecr describe-images \
                    --repository-name "$repo" \
                    --region "${{ env.AWS_REGION }}" \
                    --query 'imageDetails[*].imageTags' \
                    --output json | jq -r '.[][]' | grep -v latest | grep -E '^[0-9]+$' | sort -n)
                  echo "All numeric tags: $tags"
                  tags_to_keep=$(echo "$tags" | tail -n 2)
                  tags_to_delete=$(comm -23 <(echo "$tags" | sort -n) <(echo "$tags_to_keep" | sort -n))
                  for tag in $tags_to_delete; do
                    echo "Deleting $repo:$tag"
                    aws ecr batch-delete-image \
                      --repository-name "$repo" \
                      --region "${{ env.AWS_REGION }}" \
                      --image-ids imageTag="$tag"
                  done
                done
  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file
        run: cat ~/.kube/config

      - name: Deploy Prometheus stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
          
      - name: Login to ECR
        run: |
          kubectl delete secret regcred --ignore-not-found
          kubectl create secret docker-registry regcred \
            --docker-server=${{ secrets.REGISTRY }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: ./req-helm
          namespace: default
          config-files: req-helm/values_cloud.yaml
          name: req-helm    
